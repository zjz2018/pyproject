#!/usr/bin/env python3
# -*- coding: utf-8 -*-


# -------------Python 包含了以下内置函数：---------------
#
# 函数	描述	备注
# len(item)	计算容器中元素个数
# del(item)	删除变量	del 有两种方式
# max(item)	返回容器中元素最大值	如果是字典，只针对 key 比较
# min(item)	返回容器中元素最小值	如果是字典，只针对 key 比较


# -------------切片---------------
# 描述	Python 表达式	结果	支持的数据类型
# 切片	"0123456789"[::-2]	"97531"	字符串、列表、元组
# 切片 使用 索引值 来限定范围，从一个大的 字符串 中 切出 小的 字符串
# 列表 和 元组 都是 有序 的集合，都能够 通过索引值 获取到对应的数据
# 字典 是一个 无序 的集合，是使用 键值对 保存数据


# -------------运算符---------------
# 运算符	Python表达式	结果	描述	支持的数据类型
# +	[1, 2] + [3, 4]	[1, 2, 3, 4]	合并	字符串、列表、元组
# *	["Hi!"] * 4	['Hi!', 'Hi!', 'Hi!', 'Hi!']	重复	字符串、列表、元组
# in	3 in (1, 2, 3)	True	元素是否存在	字符串、列表、元组、字典
# not in	4 not in (1, 2, 3)	True	元素是否不存在	字符串、列表、元组、字典
# > >= == < <=	(1, 2, 3) < (2, 2, 3)	True	元素比较	字符串、列表、元组

# 注意
# + * 都是生成新的元素
# in 在对 字典 操作时，判断的是 字典的键
# in 和 not in 被称为 成员运算符
# 成员运算符
# 成员运算符用于 测试 序列中是否包含指定的 成员
#
# 运算符	描述	实例
# in	如果在指定的序列中找到值返回 True，否则返回 False	3 in (1, 2, 3) 返回 True
# not in	如果在指定的序列中没有找到值返回 True，否则返回 False	3 not in (1, 2, 3) 返回 False


# -------------完整for循环---------------
#
# for 变量 in 集合:
#
#     循环体代码
#     break
# else:
#     没有通过
#
#     退出循环，循环结束后，会执行的代码

# 在 迭代遍历 嵌套的数据类型时，例如 一个列表包含了多个字典
# 需求：要判断 某一个字典中 是否存在 指定的 值
# 如果 存在，提示并且退出循环
# 如果 不存在，在 循环整体结束 后，希望 得到一个统一的提示

students = [
    {"name": "阿土",
     "age": 20,
     "gender": True,
     "height": 1.7,
     "weight": 75.0},
    {"name": "小美",
     "age": 19,
     "gender": False,
     "height": 1.6,
     "weight": 45.0},
]

find_name = "阿土"
for stu_dict in students:

    print(stu_dict)

    # 判断当前遍历的字典中姓名是否为find_name
    if stu_dict["name"] == find_name:
        print("找到了")

        # 如果已经找到，直接退出循环，就不需要再对后续的数据进行比较
        break

else:
    # 如果希望在搜索列表时，所有的字典检查之后，都没有发现需要搜索的目标
    # 还希望得到一个统一的提示！
    print("没有找到")

print("循环结束")